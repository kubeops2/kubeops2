#!/bin/bash

# double line
double_line() {
    echo;echo
}

# info logs the given argument at info log level.
info() {
    echo "[INFO] " "$@"
}

# warn logs the given argument at warn log level.
warn() {
    echo "[WARN] " "$@" >&2
}

# fatal logs the given argument at fatal log level.
error() {
    echo "[ERR] " "$@" >&2
}

# show usage of this tool
usage() {
    echo "${INIT_USAGE}"
}

# install gum
install_gum() {
    info "::: Install Gum..."
    if ! $(dpkg -s gum &> /dev/null); then
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://repo.charm.sh/apt/gpg.key | gpg --dearmor -o /etc/apt/keyrings/charm.gpg
        echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | tee /etc/apt/sources.list.d/charm.list
        apt update && apt install gum
    fi
    double_line
    info "::: Finished installation of Gum ..."
}

# install yjq
install_yjq() {
    if ! $(which yq &> /dev/null); then
        info "::: Install yq using snap ..."
        snap install yq
    fi

    if ! $(which jq &> /dev/null); then
        info "::: Install jq using snap ..."
        snap install jq
    fi
}

# check RKE2 CONFIG DIR and File
check_config_dir() {
    if [ ! -d $(dirname "${RKE2_CONFIG_YAML}") ]; then
        mkdir -p $(dirname "${RKE2_CONFIG_YAML}")
        touch "${RKE2_CONFIG_YAML}"
    fi
}

# RKE2 server config
cluster_config() {
    gum spin --spinner dot --title "::: Start Configuring RKE2 Cluster :::" -- sleep ${RUNDELAY}
    check_config_dir
    RKE2_TOKEN=$(cat ${RKE2_TOKEN_PATH})
    if $(gum confirm "First Master ?"); then
        RKE2_FIRST=1
        while :; do
            double_line
            L4_IP=$(gum input --header="::: Enter LoadBalancer IP Address - " --value=${GUM_CASE_L4_IP})
            NODE1_IP=$(gum input --header="::: Enter 1st Node IP Address - " --value=${GUM_CASE_NODE_IP})
            NODE2_IP=$(gum input --header="::: Enter 2nd Node IP Address - " --value=${GUM_CASE_NODE_IP})
            NODE3_IP=$(gum input --header="::: Enter 3rd Node IP Address - " --value=${GUM_CASE_NODE_IP})
            
            double_line
            gum write --header='Check the below and Enter' --height=15 <<EOF > ${RKE2_CONFIG_YAML}
token: ${RKE2_TOKEN}
tls-san:
  - ${L4_IP}
  - ${NODE1_IP}
  - ${NODE2_IP}
  - ${NODE3_IP}
EOF
            if $(gum confirm "Is Everything Correct ?"); then
                double_line
                info "::: ${RKE2_CONFIG_YAML} file is saved ..."
                break
            else
                info "::: Generating config.yaml Again ..."
                continue
            fi
        done

        # Generating config.yaml for Master nodes
        double_line
        info "::: Generating ${RKE2_CONFIG_YAML_4SERVER} for Another Masters ... "
        # conditional for RKE2_CONFIG_DIR
        if [ ! -d "${RKE2_CONFIG_DIR}" ]; then
            mkdir ${RKE2_CONFIG_DIR}
        fi
        cat <<EOF > ${RKE2_CONFIG_YAML_4SERVER}
server: https://${L4_IP}:9345
token: ${RKE2_TOKEN}
tls-san:
  - ${L4_IP}
  - ${NODE1_IP}
  - ${NODE2_IP}
  - ${NODE3_IP}
EOF
        double_line
        info "::: Generating ${RKE2_CONFIG_YAML_4AGENT} for Workers ... "
        cat <<EOF > ${RKE2_CONFIG_YAML_4AGENT}
server: https://${L4_IP}:9345
token: ${RKE2_TOKEN}
EOF
    else
        gum spin --spinner dot --title "::: Config RKE2 Additional Master Nodes ... " -- sleep ${RUNDELAY}
        # loading server config.yaml file
        check_config_dir
        while :; do
            double_line
            gum write --header="Check the belows and Enter..." --height=15 < ${RKE2_CONFIG_YAML_4SERVER} > ${RKE2_CONFIG_YAML}
            if $(gum confirm "Is Everything Correct ?"); then
                double_line
                info "::: ${RKE2_CONFIG_YAML_4SERVER} file is saved ..."
                break
            else
                info "::: Generating config.yaml Again ..."
                continue
            fi
        done
    fi
}

# RKE2 agent config
agent_config() {
    gum spin --spinner dot --title "::: Config RKE2 Worker Node ... " -- sleep ${RUNDELAY}
    check_config_dir
    # loading server config.yaml file
    while :; do
        double_line
        gum write --header "Check the belows and Enter ..." < ${RKE2_CONFIG_YAML_4AGENT} > ${RKE2_CONFIG_YAML}
        if $(gum confirm "Is Everything Correct ?"); then
            double_line
            info "::: ${RKE2_CONFIG_YAML_4AGENT} file is saved ..."
            break
        else
            info "::: Generating config.yaml Again ..."
            continue
        fi        
    done
}

# Show title
show_title() {
    if [ "${DRYRUN}" = 1 ]; then
        TITLE_MESSAGE="Running Dry-run mode ..."
    else
        TITLE_MESSAGE="Initialize Installation of RKE2 ..."
    fi
    gum style \
        --foreground 212 --border-foreground 212 --border double \
        --align center --width 50 --margin "1 2" --padding "2 4" \
        'KubeOps INIT' "${TITLE_MESSAGE}"
}

# copy config.yaml to remote
copy_config_yaml() {
    if [ -e "${RKE2_CONFIG_YAML_4SERVER}" ] && [ -e "${RKE2_CONFIG_YAML_4AGENT}" ]; then
        if $(gum confirm "Do you want config.yaml to copy the Remote ?"); then
            info "Proceeding copy config.yaml to Remote ..."
            while :; do
                TARGET_CONFIG=$(gum file --height=20 ${RKE2_CONFIG_DIR})
                case "${TARGET_CONFIG}" in
                    ${RKE2_CONFIG_YAML_4SERVER})
                        RKE2_NODE_SSH=$(gum choose --header="::: Choose Node IP - " ${NODE1_IP} ${NODE2_IP} ${NODE3_IP});;
                    ${RKE2_CONFIG_YAML_4AGENT})
                        RKE2_NODE_SSH=$(gum input --header="::: Enter Node IP - ");;
                esac
                NODE_PASSWD=$(gum input --header='::: Enter Password - ' --password --char-limit=40)
                if $(gum confirm "Proceeding copy config.yaml file..."); then
                    if [ "${DRYRUN}" = 1 ]; then
                        info "::: Copy config.yaml to ${RKE2_NODE_SSH} in DRY-RUN mode ..."
                        sshpass -p ${NODE_PASSWD} scp -r ${RKE2_CONFIG_DIR} ${RKE2_ADMIN}@${RKE2_NODE_SSH}:${RKE2_CONFIG_DIR}
                    else
                        sshpass -p ${NODE_PASSWD} scp -o StrictHostKeyChecking=no -r ${RKE2_CONFIG_DIR} ${RKE2_ADMIN}@${RKE2_NODE_SSH}:${RKE2_CONFIG_DIR}
                    fi
                    if [ "$?" = 0 ]; then
                        info "::: Successfully copy config.yaml to Remote..."
                    else
                        double_line
                        error "::: Failed to copy config.yaml to Remote..."
                        error "::: Check ${RKE2_NODE_SSH} is alive or Password is Wrong!! "
                        sleep ${RUNDELAY}
                    fi
                fi
                if $(gum confirm "Wanna Quit ?"); then
                    info "::: Cancel Copying config.yaml to Remote..."
                    break
                else
                    continue
                fi
            done
        fi
    fi
}

# Check RKE2 Configurations
config_rke2_install() {
    info "::: Start Setting RKE2 Configuration!!! :::"
    sleep ${RUNDELAY}
    double_line
    RKE2_VERSION=$(gum choose --header="::: Choose RKE2 Version - " ${RKE2_ALL_VERSIONS})
    info "::: RKE2_VERSION - ${RKE2_VERSION}"

    RKE2_TYPE=$(gum choose --header="::: Choose RKE2 Type - " ${RKE2_ALL_TYPES})
    info "::: RKE2_TYPE - ${RKE2_TYPE}"

    RKE2_ADMIN=$(gum input --value='kubeops' --header='::: RKE2 Admin Account - ')
    info "::: RKE2_ADMIN - ${RKE2_ADMIN}"

    double_line
    echo -e "# RKE2 Installation Config\n- RKE2_VERSION : ${RKE2_VERSION}\n- RKE2_TYPE : ${RKE2_TYPE}\n- RKE2_ADMIN : ${RKE2_ADMIN}  " | gum format

    if $(gum confirm); then
        info "::: Proceeding Install Process RKE2 ..."
    else
        info "::: Cancel Installation RKE2 ..."
        exit -1
    fi

    double_line
    info "::: Install RKE2 with ${RKE2_VERSION} and ${RKE2_TYPE} mode ..."
    sleep ${RUNDELAY}
}

# Install rke2 along with the given configurations
install_rke2() {
    if [ "${DRYRUN}" = 1 ]; then
        echo "curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=${RKE2_VERSION} INSTSLL_RKE2_TYPE=${RKE2_TYPE} sh -"
        info "::: Enabling RKE2-Server service ..."
    else
        curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=${RKE2_VERSION} INSTSLL_RKE2_TYPE=${RKE2_TYPE} sh -
        double_line
        info "::: Enabling RKE2-Server service ..."
        sleep ${RUNDELAY}
        systemctl enable rke2-server.service
    fi
}

# terraforming function for OS and Versions such as 
# ubuntu-22.04-LTS, ubuntu-24.04-LTS
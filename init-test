#!/bin/bash

set -e

if [ "${DEBUG}" = 1 ]; then
    set -x
fi

# variables
INITENV='https://raw.githubusercontent.com/kubeops2/kubeops2/refs/heads/main/initenv'
KUBEOPS_VERSIONS='https://raw.githubusercontent.com/kubeops2/kubeops2/refs/heads/main/versions'

# double line
double_line() {
    echo;echo
}

# info logs the given argument at info log level.
info() {
    echo "[INFO] " "$@"
}

# warn logs the given argument at warn log level.
warn() {
    echo "[WARN] " "$@" >&2
}

# fatal logs the given argument at fatal log level.
fatal() {
    echo "[ERROR] " "$@" >&2
    if [ -n "${SUFFIX}" ]; then
        echo "[ALT] Please visit 'https://github.com/rancher/rke2/releases' directly and download the latest rke2.${SUFFIX}.tar.gz" >&2
    fi
    exit 1
}

# loading environtal variables using curl
curlsource() {
    info "::: Loading Environtal Variables from KubeOps2 Github..."
    f=$(mktemp -t curlsource.XXX)
    curl -o "$f" -sSL "$1"
    source "$f"
    rm -f "$f"
}

# import all required variables for installation
curlsource ${INITENV}
curlsource ${KUBEOPS_VERSIONS}

# show usage of this tool
usage() {
    echo "${INIT_USAGE}"
}

# install gum
install_gum() {
    info "::: Install Gum..."
    if ! $(dpkg -s gum &> /dev/null); then
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://repo.charm.sh/apt/gpg.key | gpg --dearmor -o /etc/apt/keyrings/charm.gpg
        echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | tee /etc/apt/sources.list.d/charm.list
        apt update && apt install gum
    fi
    double_line
    info "::: Finished installation of Gum ..."
}

# install yjq
install_yjq() {
    if ! $(which yq &> /dev/null); then
        info "::: Install yq using snap ..."
        snap install yq
    fi

    if ! $(which jq &> /dev/null); then
        info "::: Install jq using snap ..."
        snap install jq
    fi
}

# check RKE2 CONFIG DIR and File
check_config_dir() {
    if [ ! -d $(dirname "${RKE2_CONFIG_YAML}") ]; then
        mkdir -p $(dirname "${RKE2_CONFIG_YAML}")
        touch "${RKE2_CONFIG_YAML}"
    fi
}

# RKE2 server config
cluster_config() {
    gum spin --spinner dot --title "::: Start Configuring RKE2 Cluster :::" -- sleep ${RUNDELAY}
    check_config_dir
    RKE2_TOKEN=$(cat ${RKE2_TOKEN_PATH})
    if $(gum confirm "First Master ?"); then
        while :; do
            double_line
            L4_IP=$(gum input --header="::: Enter LoadBalancer IP Address - " --value=${GUM_CASE_L4_IP})
            NODE1_IP=$(gum input --header="::: Enter 1st Node IP Address - " --value=${GUM_CASE_NODE_IP})
            NODE2_IP=$(gum input --header="::: Enter 2nd Node IP Address - " --value=${GUM_CASE_NODE_IP})
            NODE3_IP=$(gum input --header="::: Enter 3rd Node IP Address - " --value=${GUM_CASE_NODE_IP})
            
            double_line
            gum write --header='Check the below and Enter' <<EOF > ${RKE2_CONFIG_YAML}
token: ${RKE2_TOKEN}
tls-san:
  - ${L4_IP}
  - ${NODE1_IP}
  - ${NODE2_IP}
  - ${NODE3_IP}
EOF
            if $(gum confirm "Is Everything Correct ?"); then
                double_line
                info "::: ${RKE2_CONFIG_YAML} file is saved ..."
                break
            else
                info "::: Generating config.yaml Again ..."
                continue
            fi
        done

        # Generating config.yaml for Master nodes
        double_line
        info "::: Generating ${RKE2_CONFIG_YAML_4SERVER} for Another Masters ... "
        cat <<EOF > ${RKE2_CONFIG_YAML_4SERVER}
server: https://${L4_IP}:9345
token: ${RKE2_TOKEN}
tls-san:
  - ${L4_IP}
  - ${NODE1_IP}
  - ${NODE2_IP}
  - ${NODE3_IP}
EOF
        double_line
        info "::: Generating ${RKE2_CONFIG_YAML_4AGENT} for Workers ... "
        cat <<EOF > ${RKE2_CONFIG_YAML_4AGENT}
server: https://${L4_IP}:9345
token: ${RKE2_TOKEN}
EOF
    else
        gum spin --spinner dot --title "::: Config RKE2 Additional Master Nodes ... " -- sleep ${RUNDELAY}
        # loading server config.yaml file
        while :; do
            double_line
            gum write --header="Check the belows and Enter..." < ${RKE2_CONFIG_YAML_4SERVER}
            if $(gum confirm "Is Everything Correct ?"); then
                double_line
                info "::: ${RKE2_CONFIG_YAML_4SERVER} file is saved ..."
                break
            else
                info "::: Generating config.yaml Again ..."
                continue
            fi
        done
    fi
}

# RKE2 agent config
agent_config() {
    gum spin --spinner dot --title "::: Config RKE2 Worker Node ... " -- sleep ${RUNDELAY}
    check_config_dir
    # loading server config.yaml file
    while :; do
        double_line
        gum write --header "Check the belows and Enter ..." < ${RKE2_CONFIG_YAML_4AGENT}
        if $(gum confirm "Is Everything Correct ?"); then
            double_line
            info "::: ${RKE2_CONFIG_YAML_4AGENT} file is saved ..."
            break
        else
            info "::: Generating config.yaml Again ..."
            continue
        fi        
    done
}

# check sudo permission
if [ "$EUID" -ne 0 ]
  then info "::: 이 스크립트는 sudo 권한으로 실행해야 합니다."
  info "::: ex> $ curl -sSL url | sudo bash"
  exit -1
fi

info "::: sudo 권한 확인"
sleep ${RUNDELAY}

# Installation Flag: true or false
if [ -z "${RKE2_RUN}" ]; then # || [ "${RKE2_RUN}" = false ]; then
    usage
    exit -1
fi

# line breaker
double_line

# install GUM
install_gum

# Check variables
# INSTALL_RKE2_VERSION 과 INSTALL_RKE2_TYPE 그리고 admin 계정을 체크한다.

info "::: Start Setting RKE2 Configuration!!! :::"
sleep ${RUNDELAY}
double_line
RKE2_VERSION=$(gum choose --header="::: Choose RKE2 Version - " ${RKE2_ALL_VERSIONS})
info "::: RKE2_VERSION - ${RKE2_VERSION}"

RKE2_TYPE=$(gum choose --header="::: Choose RKE2 Type - " ${RKE2_ALL_TYPES})
info "::: RKE2_TYPE - ${RKE2_TYPE}"

RKE2_ADMIN=$(gum input --value='kubeops' --header='::: RKE2 Admin Account - ')
info "::: RKE2_ADMIN - ${RKE2_ADMIN}"

double_line
echo -e "# RKE2 Installation Config\n- RKE2_VERSION : ${RKE2_VERSION}\n- RKE2_TYPE : ${RKE2_TYPE}\n- RKE2_ADMIN : ${RKE2_ADMIN}  " | gum format

if $(gum confirm); then
    info "::: Proceeding Install Process RKE2 ..."
else
    info "::: Cancel Installation RKE2 ..."
    exit -1
fi

# /etc/security/limits.conf 파일 수정
info "::: 시스템 전체의 파일 디스크립터 제한 설정 중..."
if grep -q "nofile" /etc/security/limits.conf; then
    sed -i '/nofile/d' /etc/security/limits.conf
fi
echo "*       soft    nofile  65535" >> /etc/security/limits.conf
echo "*       hard    nofile  65535" >> /etc/security/limits.conf
info "완료: /etc/security/limits.conf 파일이 수정되었습니다."

# /etc/sysctl.conf 파일 수정
info "::: Applying Kernel Parameters..."
if grep -q "fs.inotify.max_user_watches" /etc/sysctl.conf; then
    sed -i '/fs.inotify.max_user_watches/d' /etc/sysctl.conf
fi
if grep -q "fs.inotify.max_user_instances" /etc/sysctl.conf; then
    sed -i '/fs.inotify.max_user_instances/d' /etc/sysctl.conf
fi

echo "fs.inotify.max_user_watches=524288" >> /etc/sysctl.conf
echo "fs.inotify.max_user_instances=512" >> /etc/sysctl.conf
info "::: 완료: /etc/sysctl.conf 파일이 수정되었습니다."

sysctl -p

# swap off 처리
# /etc/fstab 에 swap 라인 주석 처리 필요
info "::: Deactivating Swap space..."
sed -i 's/\/swap/#swap/g' /etc/fstab
swapoff -a

# Install Tools
info "::: Install Iptables for CANAL CNI"
apt update
apt install iptables -y
install_yjq

# Install RKE2 As a server
double_line
info "::: Install RKE2 with ${RKE2_VERSION} and ${RKE2_TYPE} mode ..."
sleep ${RUNDELAY}

curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=${RKE2_VERSION} INSTSLL_RKE2_TYPE=${RKE2_TYPE} sh -

double_line
info "::: Enabling and Starting RKE2-Server service ..."
sleep ${RUNDELAY}
systemctl enable rke2-server.service

# Configure Cluster and Agent
if [ "${RKE2_TYPE}" = 'server' ]; then
    double_line
    info "::: Configuring RKE2 Server config.yaml ..."
    SERVER_TYPE=$(gum choose --header "Choose RKE2 Server Type: " "Standalone" "Cluster")

    if [ "${SERVER_TYPE}" = 'Standalone' ]; then
        info "::: Continue Installing RKE2 Server with Standalone..."
        sleep ${RUNDELAY}
    elif [ "${SERVER_TYPE}" = 'Cluster' ]; then
        info "::: Configure Cluster config.yaml file..."
        cluster_config
    fi
elif [ "${RKE2_TYPE}" = 'agent' ]; then
    info "::: Configuring RKE2 Agent config.yaml ..."
    agent_config
fi

systemctl start rke2-server.service
# journalctl -u rke2-server -f

double_line
info "::: Done!!! - Enabling and Starting RKE2-Server service ... "
sleep ${RUNDELAY}

# install helm
info "::: Install Helm..."
snap install helm --classic

# Setting up User Environment
double_line
info "::: Setting User ${RKE2_ADMIN} Environment..."
sleep ${RUNDELAY}
mkdir -p /home/${RKE2_ADMIN}/.kube
cp /etc/rancher/rke2/rke2.yaml /home/${RKE2_ADMIN}/.kube/config
chown -R ${RKE2_ADMIN}:${RKE2_ADMIN} /home/${RKE2_ADMIN}/.kube
chmod 600 /home/${RKE2_ADMIN}/.kube/config
echo "KUBECONFIG=/home/${RKE2_ADMIN}/.kube/config" >> /home/${RKE2_ADMIN}/.bashrc
echo "PATH=$PATH:/var/lib/rancher/rke2/bin" >> /home/${RKE2_ADMIN}/.bashrc
source /home/${RKE2_ADMIN}/.bashrc

double_line
info "::: Finish ${RKE2_ADMIN} Environment..."
info "::: Running the below command for testing!!!"
info "::: source .bashrc && kubectl get nodes"
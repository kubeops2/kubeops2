#!/bin/bash

# set -e -o pipefail

# conditional for DEBUG mode
if [ "${DEBUG}" = 1 ]; then
    set -x
elif [ "${DRYRUN}" = 1 ]; then
    RKE2_RUN=1
fi

# variables
INITENV='https://raw.githubusercontent.com/kubeops2/kubeops2/refs/heads/main/initenv'
KUBEOPS_VERSIONS='https://raw.githubusercontent.com/kubeops2/kubeops2/refs/heads/main/versions'
FUNCTIONS='https://raw.githubusercontent.com/kubeops2/kubeops2/refs/heads/main/functions'

# loading environtal variables using curl
curlsource() {
    LOADING_FILE=$(basename $1)
    echo "[INFO] ::: Loading Environtal Variables ${LOADING_FILE} from ..."
    f=$(mktemp -t curlsource.XXX)
    curl -o "$f" -sSL "$1"
    source "$f"
    rm -f "$f"
}

# import all required variables for installation
curlsource ${INITENV}
curlsource ${KUBEOPS_VERSIONS}
curlsource ${FUNCTIONS}

# check sudo permission
if [ "$EUID" -ne 0 ]; then
  info "::: This Script should be executed by root or users having SUDO ..."
  info "::: ex> $ curl -sSL url | sudo bash"
  exit -1
fi

# Installation Flag: true or false
if [ -z "${RKE2_RUN}" ]; then # || [ "${RKE2_RUN}" = false ]; then
    usage
    exit -1
fi

# install GUM
install_gum

# show title along with the current mode
show_title

# /etc/security/limits.conf 파일 수정
info "::: Applying nofile limitations in /etc/limits.conf ..."
if [ "${DRYRUN}" != 1 ]; then
    if grep -q "nofile" /etc/security/limits.conf; then
        sed -i '/nofile/d' /etc/security/limits.conf
    fi
    echo "*       soft    nofile  65535" >> /etc/security/limits.conf
    echo "*       hard    nofile  65535" >> /etc/security/limits.conf
fi
info "완료: /etc/security/limits.conf 파일이 수정되었습니다."

# /etc/sysctl.conf 파일 수정
info "::: Applying Kernel Parameters..."
if [ "${DRYRUN}" != 1 ]; then
    if grep -q "fs.inotify.max_user_watches" /etc/sysctl.conf; then
        sed -i '/fs.inotify.max_user_watches/d' /etc/sysctl.conf
    fi
    if grep -q "fs.inotify.max_user_instances" /etc/sysctl.conf; then
        sed -i '/fs.inotify.max_user_instances/d' /etc/sysctl.conf
    fi

    echo "fs.inotify.max_user_watches=524288" >> /etc/sysctl.conf
    echo "fs.inotify.max_user_instances=512" >> /etc/sysctl.conf
    sysctl -p
fi
info "::: Finished: /etc/sysctl.conf is modified..."

# swap off 처리
# /etc/fstab 에 swap 라인 주석 처리 필요
info "::: Deactivating Swap space..."
if [ "${DRYRUN}" != 1 ]; then
    sed -i 's/\/swap/#swap/g' /etc/fstab
    swapoff -a
fi

# Install Tools
info "::: Install Tools for OS forming related to RKE2..."
apt update
apt install iptables sshpass -y
install_yjq


# Configure RKE2 Installation
config_rke2_install

# Install RKE2 with configurations
install_rke2

# Configure Cluster and Agent
if [ "${RKE2_TYPE}" = 'server' ]; then
    double_line
    info "::: Configuring RKE2 Server config.yaml ..."
    SERVER_TYPE=$(gum choose --header "Choose RKE2 Server Type: " "Standalone" "Cluster")

    if [ "${SERVER_TYPE}" = 'Standalone' ]; then
        info "::: Continue Installing RKE2 Server with Standalone..."
        sleep ${RUNDELAY}
    elif [ "${SERVER_TYPE}" = 'Cluster' ]; then
        info "::: Configure Cluster config.yaml file..."
        cluster_config
    fi
elif [ "${RKE2_TYPE}" = 'agent' ]; then
    info "::: Configuring RKE2 Agent config.yaml ..."
    agent_config
fi

# Start running rke2 service
if [ "${DRYRUN}" != 1 ]; then
    systemctl start rke2-server.service
    # journalctl -u rke2-server -f

    double_line
    info "::: Finish - Running RKE2-Server service ... "
    sleep ${RUNDELAY}
fi

# install helm
info "::: Install Helm..."
if [ "${DRYRUN}" != 1 ]; then
    snap install helm --classic
fi

# Setting up User Environment
double_line
info "::: Setting User ${RKE2_ADMIN} Environment..."
sleep ${RUNDELAY}

if [ "${DRYRUN}" != 1 ]; then
    mkdir -p /home/${RKE2_ADMIN}/.kube
    cp /etc/rancher/rke2/rke2.yaml /home/${RKE2_ADMIN}/.kube/config
    chown -R ${RKE2_ADMIN}:${RKE2_ADMIN} /home/${RKE2_ADMIN}/.kube
    chmod 600 /home/${RKE2_ADMIN}/.kube/config
    echo "KUBECONFIG=/home/${RKE2_ADMIN}/.kube/config" >> /home/${RKE2_ADMIN}/.bashrc
    echo "PATH=$PATH:/var/lib/rancher/rke2/bin" >> /home/${RKE2_ADMIN}/.bashrc
    source /home/${RKE2_ADMIN}/.bashrc
fi

# Start the task of copying config.yaml to Remotes
copy_config_yaml
